using Sla.CORE;
using Sla.SLEIGH;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Sla.SLEIGH
{
    internal class UnaryExpression : PatternExpression
    {
        private PatternExpression unary;
        
        ~UnaryExpression()
        {               // Delete only non-pattern values
            if (unary != (PatternExpression*)0)
                PatternExpression::release(unary);
        }

        public UnaryExpression()
        {
            unary = (PatternExpression*)0;
        }

        public UnaryExpression(PatternExpression u)
        {
            (unary = u)->layClaim();
        }

        public PatternExpression getUnary() => unary;

        public override TokenPattern genMinPattern(List<TokenPattern> ops) => TokenPattern();

        public override void listValues(List<PatternValue> list)
        {
            unary->listValues(list);
        }

        public override void getMinMax(List<intb> minlist, List<intb> maxlist)
        {
            unary->getMinMax(minlist, maxlist);
        }

        public override void saveXml(TextWriter s)
        {               // Outer tag is generated by derived classes
            unary->saveXml(s);
        }

        public override void restoreXml(Element el, Translate trans)
        {
            List list = el->getChildren();
            List::const_iterator iter;
            iter = list.begin();
            unary = PatternExpression::restoreExpression(*iter, trans);
            unary->layClaim();
        }
    }
}
