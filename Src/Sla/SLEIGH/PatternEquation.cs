
using System.Numerics;
using System;

namespace Sla.SLEIGH
{
    // operandOrder returns a List of the self-defining OperandSymbols as the appear
    // in left to right order in the pattern
    internal abstract class PatternEquation
    {
        // Number of objects referencing this
        private int refcount;
        // Resulting pattern generated by this equation
        protected /*mutable*/ TokenPattern resultpattern;

        ~PatternEquation()
        {
        }

        public PatternEquation()
        {
            refcount = 0;
        }
        internal static bool advance_combo(List<long> val, List<long> min, List<long> max)
        {
            int i = 0;

            while (i < val.size()) {
                val[i] += 1;
                if (val[i] <= max[i])
                    // maximum is inclusive
                    return true;
                val[i] = min[i];
                i += 1;
            }
            return false;
        }

public TokenPattern getTokenPattern() => resultpattern;

        public abstract void genPattern(List<TokenPattern> ops);

        public abstract bool resolveOperandLeft(OperandResolve state);

        public virtual void operandOrder(Constructor ct, List<OperandSymbol> order)
        {
        }

        public void layClaim()
        {
            refcount += 1;
        }

        public static void release(PatternEquation pateq)
        {
            pateq.refcount -= 1;
            //if (pateq.refcount <= 0)
            //    delete pateq;
        }
    }
}
