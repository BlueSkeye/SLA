using Sla.SLEIGH;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Sla.SLEIGH
{
    // operandOrder returns a List of the self-defining OperandSymbols as the appear
    // in left to right order in the pattern
    internal abstract class PatternEquation
    {
        private int refcount;          // Number of objects referencing this
        protected /*mutable*/ TokenPattern resultpattern; // Resulting pattern generated by this equation

        ~PatternEquation()
        {
        }

        public PatternEquation()
        {
            refcount = 0;
        }
        
        public TokenPattern getTokenPattern() => resultpattern;

        public abstract void genPattern(List<TokenPattern> ops);

        public abstract bool resolveOperandLeft(OperandResolve state);

        public abstract void operandOrder(Constructor ct, List<OperandSymbol> order)
        {
        }

        public void layClaim()
        {
            refcount += 1;
        }

        public static void release(PatternEquation pateq)
        {
            pateq.refcount -= 1;
            if (pateq.refcount <= 0)
                delete pateq;
        }
    }
}
