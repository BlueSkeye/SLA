using Sla.CORE;

namespace Sla.SLEIGH
{
    internal abstract class BinaryExpression : PatternExpression
    {
        private PatternExpression left;
        private PatternExpression right;

        ~BinaryExpression()
        {               // Delete only non-pattern values
            if (left != (PatternExpression)null)
                PatternExpression.release(left);
            if (right != (PatternExpression)null)
                PatternExpression.release(right);
        }

        public BinaryExpression()
        {
            left = (PatternExpression)null;
            right = (PatternExpression)null;
        }

        public BinaryExpression(PatternExpression l, PatternExpression r)
        {
            (left = l).layClaim();
            (right = r).layClaim();
        }

        public PatternExpression getLeft() => left;

        public PatternExpression getRight() => right;

        public override TokenPattern genMinPattern(List<TokenPattern> ops)
            => new TokenPattern();

        public override void listValues(List<PatternValue> list) 
        {
            left.listValues(list);
            right.listValues(list);
        }

        public override void getMinMax(List<long> minlist, List<long> maxlist) 
        {
            left.getMinMax(minlist, maxlist);
            right.getMinMax(minlist, maxlist);
        }

        public override void saveXml(TextWriter s)
        {
            // Outer tag is generated by derived classes
            left.saveXml(s);
            right.saveXml(s);
        }

        public override void restoreXml(Element el, Translate trans)
        {
            IEnumerator<Element> iter = el.getChildren().GetEnumerator();
            if (!iter.MoveNext()) throw new ApplicationException();
            left = PatternExpression.restoreExpression(iter.Current, trans)
                ?? throw new ApplicationException();
            if (!iter.MoveNext()) throw new ApplicationException();
            right = PatternExpression.restoreExpression(iter.Current, trans)
                ?? throw new ApplicationException();
            left.layClaim();
            right.layClaim();
        }
    }
}
